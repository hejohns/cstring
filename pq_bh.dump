
pq_bh.exe:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	48 83 ec 08          	sub    $0x8,%rsp
    1004:	48 8b 05 dd 2f 00 00 	mov    0x2fdd(%rip),%rax        # 3fe8 <__gmon_start__>
    100b:	48 85 c0             	test   %rax,%rax
    100e:	74 02                	je     1012 <_init+0x12>
    1010:	ff d0                	callq  *%rax
    1012:	48 83 c4 08          	add    $0x8,%rsp
    1016:	c3                   	retq   

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 e2 2f 00 00    	pushq  0x2fe2(%rip)        # 4008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 e4 2f 00 00    	jmpq   *0x2fe4(%rip)        # 4010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001030 <free@plt>:
    1030:	ff 25 e2 2f 00 00    	jmpq   *0x2fe2(%rip)        # 4018 <free@GLIBC_2.2.5>
    1036:	68 00 00 00 00       	pushq  $0x0
    103b:	e9 e0 ff ff ff       	jmpq   1020 <.plt>

0000000000001040 <malloc@plt>:
    1040:	ff 25 da 2f 00 00    	jmpq   *0x2fda(%rip)        # 4020 <malloc@GLIBC_2.2.5>
    1046:	68 01 00 00 00       	pushq  $0x1
    104b:	e9 d0 ff ff ff       	jmpq   1020 <.plt>

0000000000001050 <realloc@plt>:
    1050:	ff 25 d2 2f 00 00    	jmpq   *0x2fd2(%rip)        # 4028 <realloc@GLIBC_2.2.5>
    1056:	68 02 00 00 00       	pushq  $0x2
    105b:	e9 c0 ff ff ff       	jmpq   1020 <.plt>

0000000000001060 <exit@plt>:
    1060:	ff 25 ca 2f 00 00    	jmpq   *0x2fca(%rip)        # 4030 <exit@GLIBC_2.2.5>
    1066:	68 03 00 00 00       	pushq  $0x3
    106b:	e9 b0 ff ff ff       	jmpq   1020 <.plt>

Disassembly of section .plt.got:

0000000000001070 <__cxa_finalize@plt>:
    1070:	ff 25 82 2f 00 00    	jmpq   *0x2f82(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1076:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000001080 <main>:
// min pq
bool less_double(const double* left, const double* right){
    return *left > *right;
}

int main(void){
    1080:	41 57                	push   %r15
}                                                          \
                                                           \
/* PQ_BH_DEFINE(T) */

#define PQ_BH_DEFINE_HELPER(x) PQ_BH_DEFINE(x)
PQ_BH_DEFINE_HELPER(PQ_BH_TYPE)
    1082:	bf 20 00 00 00       	mov    $0x20,%edi
    1087:	41 56                	push   %r14
    1089:	41 55                	push   %r13
    pq_bh_int_push_by_ref(&pq_int, &ints[6]);
    pq_bh_int_push_by_ref(&pq_int, &ints[7]);
    pq_bh_double pq_double = {.less=&less_double};
    pq_bh_double_init(&pq_double, 8);
    memcpy(pq_double.arr, doubles, 8*sizeof(double));
    pq_double.size = 8;
    108b:	41 bd 01 00 00 00    	mov    $0x1,%r13d
int main(void){
    1091:	41 54                	push   %r12
    1093:	41 bc 02 00 00 00    	mov    $0x2,%r12d
    1099:	55                   	push   %rbp
    pq_bh_int pq_int = {.less=&less_int};
    109a:	48 8d 2d ff 04 00 00 	lea    0x4ff(%rip),%rbp        # 15a0 <less_int>
int main(void){
    10a1:	53                   	push   %rbx
    10a2:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    int ints[8] = {8, 3, 7, 2, 5, 9, 8, 10};
    10a9:	66 0f 6f 05 5f 0f 00 	movdqa 0xf5f(%rip),%xmm0        # 2010 <_IO_stdin_used+0x10>
    10b0:	00 
    10b1:	48 8d 5c 24 20       	lea    0x20(%rsp),%rbx
    pq_bh_int pq_int = {.less=&less_int};
    10b6:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
    10bb:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
    int ints[8] = {8, 3, 7, 2, 5, 9, 8, 10};
    10c0:	0f 29 04 24          	movaps %xmm0,(%rsp)
    10c4:	66 0f 6f 05 54 0f 00 	movdqa 0xf54(%rip),%xmm0        # 2020 <_IO_stdin_used+0x20>
    10cb:	00 
    pq_bh_int pq_int = {.less=&less_int};
    10cc:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
    10d3:	00 00 
    int ints[8] = {8, 3, 7, 2, 5, 9, 8, 10};
    10d5:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
    10da:	e8 61 ff ff ff       	callq  1040 <malloc@plt>
    10df:	be 08 00 00 00       	mov    $0x8,%esi
    10e4:	48 89 df             	mov    %rbx,%rdi
    10e7:	48 c7 44 24 38 08 00 	movq   $0x8,0x38(%rsp)
    10ee:	00 00 
    10f0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    10f5:	e8 c6 04 00 00       	callq  15c0 <pq_bh_int_push>
    10fa:	8b 74 24 04          	mov    0x4(%rsp),%esi
    10fe:	48 89 df             	mov    %rbx,%rdi
    1101:	e8 ba 04 00 00       	callq  15c0 <pq_bh_int_push>
    1106:	8b 74 24 08          	mov    0x8(%rsp),%esi
    110a:	48 89 df             	mov    %rbx,%rdi
    110d:	e8 ae 04 00 00       	callq  15c0 <pq_bh_int_push>
    1112:	8b 74 24 0c          	mov    0xc(%rsp),%esi
    1116:	48 89 df             	mov    %rbx,%rdi
    1119:	e8 a2 04 00 00       	callq  15c0 <pq_bh_int_push>
    111e:	8b 74 24 10          	mov    0x10(%rsp),%esi
    1122:	48 89 df             	mov    %rbx,%rdi
    1125:	e8 96 04 00 00       	callq  15c0 <pq_bh_int_push>
    112a:	8b 74 24 14          	mov    0x14(%rsp),%esi
    112e:	48 89 df             	mov    %rbx,%rdi
    1131:	e8 8a 04 00 00       	callq  15c0 <pq_bh_int_push>
    1136:	8b 74 24 18          	mov    0x18(%rsp),%esi
    113a:	48 89 df             	mov    %rbx,%rdi
    113d:	e8 7e 04 00 00       	callq  15c0 <pq_bh_int_push>
    1142:	8b 74 24 1c          	mov    0x1c(%rsp),%esi
    1146:	48 89 df             	mov    %rbx,%rdi
    1149:	e8 72 04 00 00       	callq  15c0 <pq_bh_int_push>
    pq_bh_double pq_double = {.less=&less_double};
    114e:	48 8d 05 5b 04 00 00 	lea    0x45b(%rip),%rax        # 15b0 <less_double>
    1155:	bf 40 00 00 00       	mov    $0x40,%edi
    115a:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    115f:	e8 dc fe ff ff       	callq  1040 <malloc@plt>
    memcpy(pq_double.arr, doubles, 8*sizeof(double));
    1164:	66 0f 28 05 c4 0e 00 	movapd 0xec4(%rip),%xmm0        # 2030 <_IO_stdin_used+0x30>
    116b:	00 
    116c:	66 0f 6f 0d bc 0e 00 	movdqa 0xebc(%rip),%xmm1        # 2030 <_IO_stdin_used+0x30>
    1173:	00 
    1174:	48 c7 44 24 58 08 00 	movq   $0x8,0x58(%rsp)
    117b:	00 00 
    117d:	66 0f 6f 15 bb 0e 00 	movdqa 0xebb(%rip),%xmm2        # 2040 <_IO_stdin_used+0x40>
    1184:	00 
    1185:	66 0f 6f 1d c3 0e 00 	movdqa 0xec3(%rip),%xmm3        # 2050 <_IO_stdin_used+0x50>
    118c:	00 
    118d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    1192:	0f 29 84 24 80 00 00 	movaps %xmm0,0x80(%rsp)
    1199:	00 
    119a:	66 0f 28 05 9e 0e 00 	movapd 0xe9e(%rip),%xmm0        # 2040 <_IO_stdin_used+0x40>
    11a1:	00 
    11a2:	66 0f 6f 25 b6 0e 00 	movdqa 0xeb6(%rip),%xmm4        # 2060 <_IO_stdin_used+0x60>
    11a9:	00 
    pq_double.size = 8;
    11aa:	48 c7 44 24 50 08 00 	movq   $0x8,0x50(%rsp)
    11b1:	00 00 
    memcpy(pq_double.arr, doubles, 8*sizeof(double));
    11b3:	0f 29 84 24 90 00 00 	movaps %xmm0,0x90(%rsp)
    11ba:	00 
    11bb:	66 0f 28 05 8d 0e 00 	movapd 0xe8d(%rip),%xmm0        # 2050 <_IO_stdin_used+0x50>
    11c2:	00 
    11c3:	0f 11 08             	movups %xmm1,(%rax)
    11c6:	0f 29 84 24 a0 00 00 	movaps %xmm0,0xa0(%rsp)
    11cd:	00 
    11ce:	66 0f 28 05 8a 0e 00 	movapd 0xe8a(%rip),%xmm0        # 2060 <_IO_stdin_used+0x60>
    11d5:	00 
    11d6:	0f 11 50 10          	movups %xmm2,0x10(%rax)
    11da:	0f 29 84 24 b0 00 00 	movaps %xmm0,0xb0(%rsp)
    11e1:	00 
    11e2:	0f 11 58 20          	movups %xmm3,0x20(%rax)
    11e6:	0f 11 60 30          	movups %xmm4,0x30(%rax)
    11ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    11f0:	44 89 e0             	mov    %r12d,%eax
    11f3:	44 89 e9             	mov    %r13d,%ecx
    11f6:	d3 e0                	shl    %cl,%eax
    11f8:	8d 58 ff             	lea    -0x1(%rax),%ebx
    11fb:	48 98                	cltq   
    11fd:	48 63 db             	movslq %ebx,%rbx
    1200:	4c 8d 7c 00 ff       	lea    -0x1(%rax,%rax,1),%r15
    1205:	0f 1f 00             	nopl   (%rax)
    1208:	48 89 de             	mov    %rbx,%rsi
    120b:	4c 89 f7             	mov    %r14,%rdi
    120e:	48 83 c3 01          	add    $0x1,%rbx
    1212:	e8 a9 02 00 00       	callq  14c0 <pq_bh_double_siftDown>
    1217:	49 39 df             	cmp    %rbx,%r15
    121a:	75 ec                	jne    1208 <main+0x188>
    121c:	4d 85 ed             	test   %r13,%r13
    121f:	74 0f                	je     1230 <main+0x1b0>
    1221:	45 31 ed             	xor    %r13d,%r13d
    1224:	eb ca                	jmp    11f0 <main+0x170>
    1226:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    122d:	00 00 00 
    1230:	31 f6                	xor    %esi,%esi
    1232:	4c 89 f7             	mov    %r14,%rdi
    1235:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
    123a:	41 bc 02 00 00 00    	mov    $0x2,%r12d
    1240:	e8 7b 02 00 00       	callq  14c0 <pq_bh_double_siftDown>
    pq_bh_double_make_heap(&pq_double);
    /* make pq from existing array */
    // just don't push past size or a realloc on an array will occur
    pq_bh_int pq_int_exist = {.arr=ints, .less=&less_int, .size=8, .capacity=8};
    1245:	48 89 e0             	mov    %rsp,%rax
    1248:	48 89 6c 24 68       	mov    %rbp,0x68(%rsp)
    124d:	66 0f 6f 05 1b 0e 00 	movdqa 0xe1b(%rip),%xmm0        # 2070 <_IO_stdin_used+0x70>
    1254:	00 
    1255:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    125a:	bd 01 00 00 00       	mov    $0x1,%ebp
    125f:	0f 29 44 24 70       	movaps %xmm0,0x70(%rsp)
    1264:	0f 1f 40 00          	nopl   0x0(%rax)
    1268:	44 89 e0             	mov    %r12d,%eax
    126b:	89 e9                	mov    %ebp,%ecx
    126d:	d3 e0                	shl    %cl,%eax
    126f:	8d 58 ff             	lea    -0x1(%rax),%ebx
    1272:	48 98                	cltq   
    1274:	48 63 db             	movslq %ebx,%rbx
    1277:	4c 8d 74 00 ff       	lea    -0x1(%rax,%rax,1),%r14
    127c:	0f 1f 40 00          	nopl   0x0(%rax)
    1280:	48 89 de             	mov    %rbx,%rsi
    1283:	4c 89 ef             	mov    %r13,%rdi
    1286:	48 83 c3 01          	add    $0x1,%rbx
    128a:	e8 51 01 00 00       	callq  13e0 <pq_bh_int_siftDown>
    128f:	4c 39 f3             	cmp    %r14,%rbx
    1292:	75 ec                	jne    1280 <main+0x200>
    1294:	48 85 ed             	test   %rbp,%rbp
    1297:	74 07                	je     12a0 <main+0x220>
    1299:	31 ed                	xor    %ebp,%ebp
    129b:	eb cb                	jmp    1268 <main+0x1e8>
    129d:	0f 1f 00             	nopl   (%rax)
    12a0:	31 f6                	xor    %esi,%esi
    12a2:	4c 89 ef             	mov    %r13,%rdi
    12a5:	e8 36 01 00 00       	callq  13e0 <pq_bh_int_siftDown>
    12aa:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    12af:	e8 7c fd ff ff       	callq  1030 <free@plt>
    12b4:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
    12b9:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    12c0:	00 00 
    12c2:	e8 69 fd ff ff       	callq  1030 <free@plt>
    12c7:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    12cc:	e8 5f fd ff ff       	callq  1030 <free@plt>
    /* free the pqs */
    pq_bh_int_free(&pq_int);
    pq_bh_double_free(&pq_double);
    pq_bh_int_free(&pq_int);
    return 0;
}
    12d1:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    12d8:	31 c0                	xor    %eax,%eax
    12da:	5b                   	pop    %rbx
    12db:	5d                   	pop    %rbp
    12dc:	41 5c                	pop    %r12
    12de:	41 5d                	pop    %r13
    12e0:	41 5e                	pop    %r14
    12e2:	41 5f                	pop    %r15
    12e4:	c3                   	retq   
    12e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    12ec:	00 00 00 
    12ef:	90                   	nop

00000000000012f0 <_start>:
    12f0:	31 ed                	xor    %ebp,%ebp
    12f2:	49 89 d1             	mov    %rdx,%r9
    12f5:	5e                   	pop    %rsi
    12f6:	48 89 e2             	mov    %rsp,%rdx
    12f9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    12fd:	50                   	push   %rax
    12fe:	54                   	push   %rsp
    12ff:	4c 8d 05 ca 03 00 00 	lea    0x3ca(%rip),%r8        # 16d0 <__libc_csu_fini>
    1306:	48 8d 0d 63 03 00 00 	lea    0x363(%rip),%rcx        # 1670 <__libc_csu_init>
    130d:	48 8d 3d 6c fd ff ff 	lea    -0x294(%rip),%rdi        # 1080 <main>
    1314:	ff 15 c6 2c 00 00    	callq  *0x2cc6(%rip)        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    131a:	f4                   	hlt    
    131b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001320 <deregister_tm_clones>:
    1320:	48 8d 3d 21 2d 00 00 	lea    0x2d21(%rip),%rdi        # 4048 <__TMC_END__>
    1327:	48 8d 05 1a 2d 00 00 	lea    0x2d1a(%rip),%rax        # 4048 <__TMC_END__>
    132e:	48 39 f8             	cmp    %rdi,%rax
    1331:	74 15                	je     1348 <deregister_tm_clones+0x28>
    1333:	48 8b 05 9e 2c 00 00 	mov    0x2c9e(%rip),%rax        # 3fd8 <_ITM_deregisterTMCloneTable>
    133a:	48 85 c0             	test   %rax,%rax
    133d:	74 09                	je     1348 <deregister_tm_clones+0x28>
    133f:	ff e0                	jmpq   *%rax
    1341:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1348:	c3                   	retq   
    1349:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001350 <register_tm_clones>:
    1350:	48 8d 3d f1 2c 00 00 	lea    0x2cf1(%rip),%rdi        # 4048 <__TMC_END__>
    1357:	48 8d 35 ea 2c 00 00 	lea    0x2cea(%rip),%rsi        # 4048 <__TMC_END__>
    135e:	48 29 fe             	sub    %rdi,%rsi
    1361:	48 c1 fe 03          	sar    $0x3,%rsi
    1365:	48 89 f0             	mov    %rsi,%rax
    1368:	48 c1 e8 3f          	shr    $0x3f,%rax
    136c:	48 01 c6             	add    %rax,%rsi
    136f:	48 d1 fe             	sar    %rsi
    1372:	74 14                	je     1388 <register_tm_clones+0x38>
    1374:	48 8b 05 75 2c 00 00 	mov    0x2c75(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable>
    137b:	48 85 c0             	test   %rax,%rax
    137e:	74 08                	je     1388 <register_tm_clones+0x38>
    1380:	ff e0                	jmpq   *%rax
    1382:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1388:	c3                   	retq   
    1389:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001390 <__do_global_dtors_aux>:
    1390:	80 3d b1 2c 00 00 00 	cmpb   $0x0,0x2cb1(%rip)        # 4048 <__TMC_END__>
    1397:	75 2f                	jne    13c8 <__do_global_dtors_aux+0x38>
    1399:	55                   	push   %rbp
    139a:	48 83 3d 56 2c 00 00 	cmpq   $0x0,0x2c56(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    13a1:	00 
    13a2:	48 89 e5             	mov    %rsp,%rbp
    13a5:	74 0c                	je     13b3 <__do_global_dtors_aux+0x23>
    13a7:	48 8b 3d 92 2c 00 00 	mov    0x2c92(%rip),%rdi        # 4040 <__dso_handle>
    13ae:	e8 bd fc ff ff       	callq  1070 <__cxa_finalize@plt>
    13b3:	e8 68 ff ff ff       	callq  1320 <deregister_tm_clones>
    13b8:	c6 05 89 2c 00 00 01 	movb   $0x1,0x2c89(%rip)        # 4048 <__TMC_END__>
    13bf:	5d                   	pop    %rbp
    13c0:	c3                   	retq   
    13c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    13c8:	c3                   	retq   
    13c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000013d0 <frame_dummy>:
    13d0:	e9 7b ff ff ff       	jmpq   1350 <register_tm_clones>
    13d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    13dc:	00 00 00 
    13df:	90                   	nop

00000000000013e0 <pq_bh_int_siftDown>:
    13e0:	41 57                	push   %r15
    13e2:	4c 8d 7c 36 01       	lea    0x1(%rsi,%rsi,1),%r15
    13e7:	41 56                	push   %r14
    13e9:	41 55                	push   %r13
    13eb:	41 54                	push   %r12
    13ed:	55                   	push   %rbp
    13ee:	53                   	push   %rbx
    13ef:	48 83 ec 08          	sub    $0x8,%rsp
    13f3:	48 8b 47 10          	mov    0x10(%rdi),%rax
    13f7:	48 83 e8 01          	sub    $0x1,%rax
    13fb:	4c 39 f8             	cmp    %r15,%rax
    13fe:	0f 82 8e 00 00 00    	jb     1492 <pq_bh_int_siftDown+0xb2>
    1404:	48 89 f3             	mov    %rsi,%rbx
    1407:	49 89 fd             	mov    %rdi,%r13
    140a:	48 8b 37             	mov    (%rdi),%rsi
    140d:	eb 56                	jmp    1465 <pq_bh_int_siftDown+0x85>
    140f:	90                   	nop
    1410:	4c 8d 34 d5 00 00 00 	lea    0x0(,%rdx,8),%r14
    1417:	00 
    1418:	4c 01 f6             	add    %r14,%rsi
    141b:	ff d1                	callq  *%rcx
    141d:	49 8b 4d 08          	mov    0x8(%r13),%rcx
    1421:	49 8b 75 00          	mov    0x0(%r13),%rsi
    1425:	84 c0                	test   %al,%al
    1427:	75 7f                	jne    14a8 <pq_bh_int_siftDown+0xc8>
    1429:	48 8d 3c 2e          	lea    (%rsi,%rbp,1),%rdi
    142d:	4d 89 fc             	mov    %r15,%r12
    1430:	48 c1 e3 02          	shl    $0x2,%rbx
    1434:	48 01 de             	add    %rbx,%rsi
    1437:	ff d1                	callq  *%rcx
    1439:	84 c0                	test   %al,%al
    143b:	75 55                	jne    1492 <pq_bh_int_siftDown+0xb2>
    143d:	49 8b 75 00          	mov    0x0(%r13),%rsi
    1441:	4f 8d 7c 24 01       	lea    0x1(%r12,%r12,1),%r15
    1446:	48 01 f3             	add    %rsi,%rbx
    1449:	48 8d 04 2e          	lea    (%rsi,%rbp,1),%rax
    144d:	8b 13                	mov    (%rbx),%edx
    144f:	8b 08                	mov    (%rax),%ecx
    1451:	89 0b                	mov    %ecx,(%rbx)
    1453:	4c 89 e3             	mov    %r12,%rbx
    1456:	89 10                	mov    %edx,(%rax)
    1458:	49 8b 45 10          	mov    0x10(%r13),%rax
    145c:	48 83 e8 01          	sub    $0x1,%rax
    1460:	49 39 c7             	cmp    %rax,%r15
    1463:	77 2d                	ja     1492 <pq_bh_int_siftDown+0xb2>
    1465:	48 8d 53 01          	lea    0x1(%rbx),%rdx
    1469:	4a 8d 2c bd 00 00 00 	lea    0x0(,%r15,4),%rbp
    1470:	00 
    1471:	49 8b 4d 08          	mov    0x8(%r13),%rcx
    1475:	4c 8d 24 12          	lea    (%rdx,%rdx,1),%r12
    1479:	48 8d 3c 2e          	lea    (%rsi,%rbp,1),%rdi
    147d:	49 39 c4             	cmp    %rax,%r12
    1480:	76 8e                	jbe    1410 <pq_bh_int_siftDown+0x30>
    1482:	48 c1 e3 02          	shl    $0x2,%rbx
    1486:	4d 89 fc             	mov    %r15,%r12
    1489:	48 01 de             	add    %rbx,%rsi
    148c:	ff d1                	callq  *%rcx
    148e:	84 c0                	test   %al,%al
    1490:	74 ab                	je     143d <pq_bh_int_siftDown+0x5d>
    1492:	48 83 c4 08          	add    $0x8,%rsp
    1496:	5b                   	pop    %rbx
    1497:	5d                   	pop    %rbp
    1498:	41 5c                	pop    %r12
    149a:	41 5d                	pop    %r13
    149c:	41 5e                	pop    %r14
    149e:	41 5f                	pop    %r15
    14a0:	c3                   	retq   
    14a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    14a8:	4a 8d 3c 36          	lea    (%rsi,%r14,1),%rdi
    14ac:	4c 89 f5             	mov    %r14,%rbp
    14af:	e9 7c ff ff ff       	jmpq   1430 <pq_bh_int_siftDown+0x50>
    14b4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    14bb:	00 00 00 00 
    14bf:	90                   	nop

00000000000014c0 <pq_bh_double_siftDown>:
    14c0:	41 57                	push   %r15
    14c2:	4c 8d 7c 36 01       	lea    0x1(%rsi,%rsi,1),%r15
    14c7:	41 56                	push   %r14
    14c9:	41 55                	push   %r13
    14cb:	41 54                	push   %r12
    14cd:	55                   	push   %rbp
    14ce:	53                   	push   %rbx
    14cf:	48 83 ec 08          	sub    $0x8,%rsp
    14d3:	48 8b 47 10          	mov    0x10(%rdi),%rax
    14d7:	48 83 e8 01          	sub    $0x1,%rax
    14db:	4c 39 f8             	cmp    %r15,%rax
    14de:	0f 82 99 00 00 00    	jb     157d <pq_bh_double_siftDown+0xbd>
    14e4:	48 89 f3             	mov    %rsi,%rbx
    14e7:	49 89 fd             	mov    %rdi,%r13
    14ea:	48 8b 37             	mov    (%rdi),%rsi
    14ed:	eb 61                	jmp    1550 <pq_bh_double_siftDown+0x90>
    14ef:	90                   	nop
    14f0:	48 c1 e2 04          	shl    $0x4,%rdx
    14f4:	48 01 d6             	add    %rdx,%rsi
    14f7:	49 89 d6             	mov    %rdx,%r14
    14fa:	ff d1                	callq  *%rcx
    14fc:	49 8b 4d 08          	mov    0x8(%r13),%rcx
    1500:	49 8b 75 00          	mov    0x0(%r13),%rsi
    1504:	84 c0                	test   %al,%al
    1506:	0f 85 84 00 00 00    	jne    1590 <pq_bh_double_siftDown+0xd0>
    150c:	48 8d 3c 2e          	lea    (%rsi,%rbp,1),%rdi
    1510:	4d 89 fc             	mov    %r15,%r12
    1513:	48 c1 e3 03          	shl    $0x3,%rbx
    1517:	48 01 de             	add    %rbx,%rsi
    151a:	ff d1                	callq  *%rcx
    151c:	84 c0                	test   %al,%al
    151e:	75 5d                	jne    157d <pq_bh_double_siftDown+0xbd>
    1520:	49 8b 75 00          	mov    0x0(%r13),%rsi
    1524:	4f 8d 7c 24 01       	lea    0x1(%r12,%r12,1),%r15
    1529:	48 01 f3             	add    %rsi,%rbx
    152c:	48 8d 04 2e          	lea    (%rsi,%rbp,1),%rax
    1530:	f2 0f 10 03          	movsd  (%rbx),%xmm0
    1534:	f2 0f 10 08          	movsd  (%rax),%xmm1
    1538:	f2 0f 11 0b          	movsd  %xmm1,(%rbx)
    153c:	4c 89 e3             	mov    %r12,%rbx
    153f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    1543:	49 8b 45 10          	mov    0x10(%r13),%rax
    1547:	48 83 e8 01          	sub    $0x1,%rax
    154b:	49 39 c7             	cmp    %rax,%r15
    154e:	77 2d                	ja     157d <pq_bh_double_siftDown+0xbd>
    1550:	48 8d 53 01          	lea    0x1(%rbx),%rdx
    1554:	4a 8d 2c fd 00 00 00 	lea    0x0(,%r15,8),%rbp
    155b:	00 
    155c:	49 8b 4d 08          	mov    0x8(%r13),%rcx
    1560:	4c 8d 24 12          	lea    (%rdx,%rdx,1),%r12
    1564:	48 8d 3c 2e          	lea    (%rsi,%rbp,1),%rdi
    1568:	49 39 c4             	cmp    %rax,%r12
    156b:	76 83                	jbe    14f0 <pq_bh_double_siftDown+0x30>
    156d:	48 c1 e3 03          	shl    $0x3,%rbx
    1571:	4d 89 fc             	mov    %r15,%r12
    1574:	48 01 de             	add    %rbx,%rsi
    1577:	ff d1                	callq  *%rcx
    1579:	84 c0                	test   %al,%al
    157b:	74 a3                	je     1520 <pq_bh_double_siftDown+0x60>
    157d:	48 83 c4 08          	add    $0x8,%rsp
    1581:	5b                   	pop    %rbx
    1582:	5d                   	pop    %rbp
    1583:	41 5c                	pop    %r12
    1585:	41 5d                	pop    %r13
    1587:	41 5e                	pop    %r14
    1589:	41 5f                	pop    %r15
    158b:	c3                   	retq   
    158c:	0f 1f 40 00          	nopl   0x0(%rax)
    1590:	4a 8d 3c 36          	lea    (%rsi,%r14,1),%rdi
    1594:	4c 89 f5             	mov    %r14,%rbp
    1597:	e9 77 ff ff ff       	jmpq   1513 <pq_bh_double_siftDown+0x53>
    159c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000015a0 <less_int>:
    return *left < *right;
    15a0:	8b 06                	mov    (%rsi),%eax
    15a2:	39 07                	cmp    %eax,(%rdi)
    15a4:	0f 9c c0             	setl   %al
}
    15a7:	c3                   	retq   
    15a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    15af:	00 

00000000000015b0 <less_double>:
    return *left > *right;
    15b0:	f2 0f 10 07          	movsd  (%rdi),%xmm0
    15b4:	66 0f 2f 06          	comisd (%rsi),%xmm0
    15b8:	0f 97 c0             	seta   %al
}
    15bb:	c3                   	retq   
    15bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000015c0 <pq_bh_int_push>:
    15c0:	41 55                	push   %r13
    15c2:	49 89 fd             	mov    %rdi,%r13
    15c5:	41 54                	push   %r12
    15c7:	55                   	push   %rbp
    15c8:	89 f5                	mov    %esi,%ebp
    15ca:	53                   	push   %rbx
    15cb:	48 83 ec 08          	sub    $0x8,%rsp
    15cf:	48 8b 5f 10          	mov    0x10(%rdi),%rbx
    15d3:	48 3b 5f 18          	cmp    0x18(%rdi),%rbx
    15d7:	72 21                	jb     15fa <pq_bh_int_push+0x3a>
    15d9:	48 8b 3f             	mov    (%rdi),%rdi
    15dc:	48 8d 34 dd 00 00 00 	lea    0x0(,%rbx,8),%rsi
    15e3:	00 
    15e4:	e8 67 fa ff ff       	callq  1050 <realloc@plt>
    15e9:	48 85 c0             	test   %rax,%rax
    15ec:	74 70                	je     165e <pq_bh_int_push+0x9e>
    15ee:	49 89 45 00          	mov    %rax,0x0(%r13)
    15f2:	49 8b 5d 10          	mov    0x10(%r13),%rbx
    15f6:	49 d1 65 18          	shlq   0x18(%r13)
    15fa:	49 8b 7d 00          	mov    0x0(%r13),%rdi
    15fe:	48 8d 43 01          	lea    0x1(%rbx),%rax
    1602:	89 2c 9f             	mov    %ebp,(%rdi,%rbx,4)
    1605:	49 89 45 10          	mov    %rax,0x10(%r13)
    1609:	48 85 db             	test   %rbx,%rbx
    160c:	75 1f                	jne    162d <pq_bh_int_push+0x6d>
    160e:	eb 43                	jmp    1653 <pq_bh_int_push+0x93>
    1610:	49 8b 7d 00          	mov    0x0(%r13),%rdi
    1614:	49 01 fc             	add    %rdi,%r12
    1617:	48 01 fd             	add    %rdi,%rbp
    161a:	41 8b 04 24          	mov    (%r12),%eax
    161e:	8b 55 00             	mov    0x0(%rbp),%edx
    1621:	41 89 14 24          	mov    %edx,(%r12)
    1625:	89 45 00             	mov    %eax,0x0(%rbp)
    1628:	48 85 db             	test   %rbx,%rbx
    162b:	74 26                	je     1653 <pq_bh_int_push+0x93>
    162d:	48 8d 2c 9d 00 00 00 	lea    0x0(,%rbx,4),%rbp
    1634:	00 
    1635:	48 83 eb 01          	sub    $0x1,%rbx
    1639:	48 d1 eb             	shr    %rbx
    163c:	48 8d 34 2f          	lea    (%rdi,%rbp,1),%rsi
    1640:	4c 8d 24 9d 00 00 00 	lea    0x0(,%rbx,4),%r12
    1647:	00 
    1648:	4c 01 e7             	add    %r12,%rdi
    164b:	41 ff 55 08          	callq  *0x8(%r13)
    164f:	84 c0                	test   %al,%al
    1651:	75 bd                	jne    1610 <pq_bh_int_push+0x50>
    1653:	48 83 c4 08          	add    $0x8,%rsp
    1657:	5b                   	pop    %rbx
    1658:	5d                   	pop    %rbp
    1659:	41 5c                	pop    %r12
    165b:	41 5d                	pop    %r13
    165d:	c3                   	retq   
    165e:	bf 01 00 00 00       	mov    $0x1,%edi
    1663:	e8 f8 f9 ff ff       	callq  1060 <exit@plt>
    1668:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    166f:	00 

0000000000001670 <__libc_csu_init>:
    1670:	41 57                	push   %r15
    1672:	49 89 d7             	mov    %rdx,%r15
    1675:	41 56                	push   %r14
    1677:	49 89 f6             	mov    %rsi,%r14
    167a:	41 55                	push   %r13
    167c:	41 89 fd             	mov    %edi,%r13d
    167f:	41 54                	push   %r12
    1681:	4c 8d 25 60 27 00 00 	lea    0x2760(%rip),%r12        # 3de8 <__frame_dummy_init_array_entry>
    1688:	55                   	push   %rbp
    1689:	48 8d 2d 60 27 00 00 	lea    0x2760(%rip),%rbp        # 3df0 <__init_array_end>
    1690:	53                   	push   %rbx
    1691:	4c 29 e5             	sub    %r12,%rbp
    1694:	48 83 ec 08          	sub    $0x8,%rsp
    1698:	e8 63 f9 ff ff       	callq  1000 <_init>
    169d:	48 c1 fd 03          	sar    $0x3,%rbp
    16a1:	74 1b                	je     16be <__libc_csu_init+0x4e>
    16a3:	31 db                	xor    %ebx,%ebx
    16a5:	0f 1f 00             	nopl   (%rax)
    16a8:	4c 89 fa             	mov    %r15,%rdx
    16ab:	4c 89 f6             	mov    %r14,%rsi
    16ae:	44 89 ef             	mov    %r13d,%edi
    16b1:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
    16b5:	48 83 c3 01          	add    $0x1,%rbx
    16b9:	48 39 dd             	cmp    %rbx,%rbp
    16bc:	75 ea                	jne    16a8 <__libc_csu_init+0x38>
    16be:	48 83 c4 08          	add    $0x8,%rsp
    16c2:	5b                   	pop    %rbx
    16c3:	5d                   	pop    %rbp
    16c4:	41 5c                	pop    %r12
    16c6:	41 5d                	pop    %r13
    16c8:	41 5e                	pop    %r14
    16ca:	41 5f                	pop    %r15
    16cc:	c3                   	retq   
    16cd:	0f 1f 00             	nopl   (%rax)

00000000000016d0 <__libc_csu_fini>:
    16d0:	c3                   	retq   

Disassembly of section .fini:

00000000000016d4 <_fini>:
    16d4:	48 83 ec 08          	sub    $0x8,%rsp
    16d8:	48 83 c4 08          	add    $0x8,%rsp
    16dc:	c3                   	retq   
